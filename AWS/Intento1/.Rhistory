(1.96**2) / (0.002)**
(1.96**2) / (0.002)**2
(1.96**2) / (0.02)**2
((1.96**2) / (0.02)**2)*10
((1.96**2) / (0.02)**2)*11
40000*.7
39000*.7
39000*.75
39000*25*1.3
(39000/20)*1.3
(39000/25)*1.3
shiny::runApp('C:/Users/usuario/Downloads/First/InferenciaEstadistica/appLRT')
library(lubridate)
t1 <- ymd('2020-09-01')
t2 <- ymd('2020-05-04')
t2-t1
t2%-%t1
t2%--%t1
t2-t1
120/7
combn(letters[1:4], 2)
letters[1:4]
combn(c('L', 'L', 'L', 'L', 'L', 'W', 'W'), 7  )
combn(c('L', 'L', 'L', 'L', 'L', 'W', 'W'), 2  )
permn(c('L', 'L', 'L', 'L', 'L', 'W', 'W'))
install.packages("combinat")
library(combinat)
combn(c('L', 'L', 'L', 'L', 'L', 'W', 'W'), 2  )
library(combinat)
permn(c('L', 'L', 'L', 'L', 'L', 'W', 'W'))
combn(c('L', 'L', 'L', 'L', 'L', 'W', 'W'), 7  )
library(combinat)
permn(c('L', 'L', 'L', 'L', 'L', 'W', 'W'))
permn(c('L', 'L', 'L', 'L', 'L', 'W', 'W'))[1:21]
45000*.7
50000*.7
50000*.7/21
12*50000*.7/21
78+9609+34297+1938+2906
79+10140+27360+34953+1969+2703
62+10860+26000+34515+2578+3422
78+9609+34297+1938+2906
79+10140+27360+34953+1969+2703
62+10860+26000+34515+2578+3422
11 %% 3
1:11 %%2
a <- 1:10000
index  <- a %% 5 =0
index  <- a %% 5 ==0
sum(index)
index <- index %% 7
sum(index)
a <- 1:10000
index  <- a %% 5 ==0
sum(index)
index <- index %% 7 == 0
sum(index)
index  <- (a %% 5 ==0) &  (a %% 7 ==0)
sum(index)
a <- 0:999
index  <- (a %% 5 ==0) &  (a %% 7 ==0)
sum(index)
a <- 0:9999
index  <- (a %% 5 ==0) &  (a %% 7 ==0)
sum(index)
a <- 0:1000
index  <- (a %% 5 ==0) &  (a %% 7 ==0)
sum(index)
index <- index %% 7 == 0
1+6*1:100
a <- 1:9990
index  <- (a %% 5 ==0) &  (a %% 7 ==0)
sum(index)
a <- 1:9990
index  <- (a %% 5 ==0) &  (a %% 7 ==0)
sum(index)
index <- index %% 7 == 0
a <- 1:9990
index  <- (a %% 5 ==0)
sum(index)
a <- 1:9990
index  <- (a %% 5 ==0) &  (a %% 7 ==0)
sum(index)
a <- 1:9990
index  <- (a %% 35 ==0)
sum(index)
a <- 1:999
index  <- (a %% 35 ==0) &  (a %% 7 ==0)
sum(index)
index <- index %% 7 == 0
1+6*1:100
a <- 1:9990
index  <- (a %% 35 ==0) &  (a %% 7 ==0)
a[index]
a <- 1:9990
index  <- (a %% 5 ==0) &  (a %% 7 ==0)
a[index]
a <- 1:9999
index  <- (a %% 5 ==0) &  (a %% 7 ==0) &  (a %% 10 ==0)
a[index]
sum(index)
142-15
142-14
1+6*1:100
62*5+2
749-2
749-2/62
(749-2)/62
install.packages("tinytex")
install.packages(c("checkpoint", "cluster", "jsonlite", "MASS", "Matrix", "mgcv", "nlme", "R6", "rpart", "RUnit", "survival"))
install.packages(c("nlme", "rpart"))
writeLines('PATH="${RTOOLS40_HOME}\\usr\\bin;${PATH}"', con = "~/.Renviron")
Sys.which("make")
install.packages("jsonlite", type = "source")
packs <- c('lubridate', 'dplyr', 'ggplot2', 'caret', 'MLmetrics', 'gbm', 'e1071', 'LiblineaR',
'xgboost', 'randomForest', 'ROCR')
index <- packs %in% row.names(installed.packages())
if (any(!index)){
sapply(packs[!index], FUN=install.packages )
}
require(lubridate) # easy handle datetimes
require(dplyr) # like SQL in R, and also load pipe operator
require(ggplot2) # easy, fast  and nice plots
require(caret) # a toolbox
require(MLmetrics) # metric in one line
require(gbm) # boosting alg.
require(e1071) # numerical rutines for svm implementation
require(LiblineaR) # another implementation for RLogReg
require(xgboost) # The implementation
require(randomForest) # nice RF implementation
require(doParallel) #ugly parallel in R but useful
rm(list=ls())
t1 <- Sys.time()
########## Aux functions
createPartition <- function(data_, p=0.7){
t <- unique(data_$device)
n <- length(t)
n.p <- round(n*p, 0)
t.sample <- sample(t, n.p)
train.index <- which( data_$device %in% t.sample)
return(train.index)
}
cl <- makePSOCKcluster(5)
registerDoParallel(cl)
setwd("C:/Users/usuario/Desktop/GitHub/DSenCDMX/AWS/Intento1")
data.raw <- read.csv(file='device_failure.csv') # few records kernels function works fine
sum(is.na(data.raw)) # not nulls thank you :D
sapply(data.raw, class)
data.raw %>% arrange(device, date) %>% mutate(date = ymd(date) ) -> data.raw
names(data.raw)
# only each device has 0 or 1 failure, and if has a failure it's the last row
n.fails.index <- which(data.raw$failure==1) #only 106 failures
nn.fails <- data.raw[ rep(n.fails.index, each=9) + -4:4, ]
#View(nn.fails)
data.raw %>% filter(failure==1) %>% group_by(device) %>% summarise(n=n()) -> t
summary(t$n)
table(data.raw$failure) / dim(data.raw)[1]
summary(data.raw)
## Focus on success stories
#########################
device.with.failures <- unique(data.raw$device[n.fails.index] )
data.sample <- data.raw[ data.raw$device %in% device.with.failures, ]
write.csv(data.sample, row.names = FALSE, file='failures.csv')
ggplot(data.sample, aes(date, attribute1, color= device, alpha=.03 )) +
geom_line() +   theme_minimal() +
theme(legend.position="none")
ggplot(data.sample, aes(attribute1, fill =  as.character(failure), alpha=.01)) +
geom_density()  + theme_minimal()
ggplot(data.sample, aes(attribute2, fill =  as.character(failure), alpha=.01)) +
geom_density()  + theme_minimal()
ggplot(data.sample, aes(attribute3, fill =  as.character(failure), alpha=.01)) +
geom_density()  + theme_minimal()
ggplot(data.sample, aes(attribute4, fill =  as.character(failure), alpha=.01)) +
geom_density()  + theme_minimal()
ggplot(data.sample, aes(attribute5, fill =  as.character(failure), alpha=.01)) +
geom_density()  + theme_minimal()
ggplot(data.sample, aes(attribute6, fill =  as.character(failure), alpha=.01)) +
geom_density()  + theme_minimal()
ggplot(data.sample, aes(attribute7, fill =  as.character(failure), alpha=.01)) +
geom_density()  + theme_minimal()
ggplot(data.sample, aes(attribute8, fill =  as.character(failure), alpha=.01)) +
geom_density()  + theme_minimal()
ggplot(data.sample, aes(attribute9, fill =  as.character(failure), alpha=.01)) +
geom_density()  + theme_minimal()
index.columns <- c(2, 3, 4, 7, 8, 9) + 3
# log features selected
data.sample[, names(data.sample)[index.columns]] <-
log(data.sample[, names(data.sample)[index.columns]] + 1 )
# standar features
index.columns <- grep('attr', names(data.sample))
summary(data.sample)
for ( i in index.columns ){
temp <- data.sample[, names(data.sample)[i]]
data.sample[, names(data.sample)[i]] <- scale(temp)
}
ggplot(data.sample, aes(attribute1, fill =  as.character(failure), alpha=.01)) +
geom_density() + theme_minimal()
ggplot(data.sample, aes(attribute2, fill =  as.character(failure), alpha=.01)) +
geom_density()  + theme_minimal()
ggplot(data.sample, aes(attribute3, fill =  as.character(failure), alpha=.01)) +
geom_density()  + theme_minimal()
ggplot(data.sample, aes(attribute4, fill =  as.character(failure), alpha=.01)) +
geom_density()  + theme_minimal()
ggplot(data.sample, aes(attribute5, fill =  as.character(failure), alpha=.01)) +
geom_density()  + theme_minimal()
ggplot(data.sample, aes(attribute6, fill =  as.character(failure), alpha=.01)) +
geom_density()  + theme_minimal()
ggplot(data.sample, aes(attribute7, fill =  as.character(failure), alpha=.01)) +
geom_density()  + theme_minimal()
ggplot(data.sample, aes(attribute8, fill =  as.character(failure), alpha=.01)) +
geom_density()  + theme_minimal()
ggplot(data.sample, aes(attribute9, fill =  as.character(failure), alpha=.01)) +
geom_density()  + theme_minimal()
############### Split data
#nn.fails[, c(4, 6) ] <- NULL
set.seed(0)
data.sample$failure <- factor(data.sample$failure)
levels(data.sample$failure) <- c('NoFailure', 'Failure')
train.index <- createPartition(data.sample)
data.sample$date <- data.sample$device <- NULL
train <- data.sample[train.index, ]
test <- data.sample[-train.index, ]
table(train$failure)/dim(train)[1]
####################   train
f1 <- function (data, lev = NULL, model = NULL) {
precision <- posPredValue(data$pred, data$obs, positive = "Failure")
recall  <- sensitivity(data$pred, data$obs, positive = "Failure")
f1_val <- (2 * precision * recall) / (precision + recall)
names(f1_val) <- c("F1")
f1_val
}
fit.control <- trainControl( method = 'repeatedcv', number = 10, repeats = 3,
allowParallel = TRUE, classProbs = TRUE,
summaryFunction = f1,  sampling =  "up")
#install.packages('LiblineaR')
set.seed(0)
gbmFit1 <- train(failure ~ ., data = train, method = "gbm", trControl = fit.control,
verbose = TRUE)
gbmFit1
#install.packages('xgboost')
xgb.Fit1 <- train(failure ~ ., data = train, method = "xgbTree", #tuneLength = 5, search= 'random',
trControl = fit.control,
verbose = TRUE)
xgb.Fit1
rf.Fit1 <- train(failure ~ ., data = train, method = "rf", trControl = fit.control,
verbose = TRUE)
rf.Fit1
rlg.Fit1 <- train(failure ~ ., data = train, method = "regLogistic",
trControl = fit.control, verbose = TRUE)
rlg.Fit1
resamps <- resamples(list(GBM = gbmFit1, XGB = xgb.Fit1,
RF = rf.Fit1, RLG=rlg.Fit1  ))
resamps
summary(resamps)
summary(diff(resamps))
confusionMatrix(predict(rf.Fit1$finalModel,train), train$failure)
confusionMatrix(predict(rlg.Fit1$finalModel,train)$predictions, train$failure)
confusionMatrix(predict(xgb.Fit1, train), train$failure)
t2 <- Sys.time()
t2 - t1
t3 <- Sys.time()
set.seed(0)
tune_grid <- expand.grid(nrounds=c(100,300), max_depth = c(4:7), eta = c(0.05, 1),   gamma = c(0.01),
colsample_bytree = c(0.75), subsample = c(0.50),  min_child_weight = c(0))
xgb_fit <- train(failure ~., data = train, method = "xgbTree",
trControl= fit.control,
tuneGrid = tune_grid,
tuneLength = 10)
tune_grid <- expand.grid(.mtry = (1:16))
rf_fit <- train(failure ~., data = train, method = "rf",
trControl= fit.control,
tuneGrid = tune_grid,
tuneLength = 10)
t4 <- Sys.time()
t4 - t1
confusionMatrix(predict(rf_fit$finalModel, test), test$failure)
confusionMatrix(predict(xgb_fit, test), test$failure)
