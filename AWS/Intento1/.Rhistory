t2%-%t1
t2%--%t1
t2-t1
120/7
combn(letters[1:4], 2)
letters[1:4]
combn(c('L', 'L', 'L', 'L', 'L', 'W', 'W'), 7  )
combn(c('L', 'L', 'L', 'L', 'L', 'W', 'W'), 2  )
permn(c('L', 'L', 'L', 'L', 'L', 'W', 'W'))
install.packages("combinat")
library(combinat)
combn(c('L', 'L', 'L', 'L', 'L', 'W', 'W'), 2  )
library(combinat)
permn(c('L', 'L', 'L', 'L', 'L', 'W', 'W'))
combn(c('L', 'L', 'L', 'L', 'L', 'W', 'W'), 7  )
library(combinat)
permn(c('L', 'L', 'L', 'L', 'L', 'W', 'W'))
permn(c('L', 'L', 'L', 'L', 'L', 'W', 'W'))[1:21]
45000*.7
50000*.7
50000*.7/21
12*50000*.7/21
78+9609+34297+1938+2906
79+10140+27360+34953+1969+2703
62+10860+26000+34515+2578+3422
78+9609+34297+1938+2906
79+10140+27360+34953+1969+2703
62+10860+26000+34515+2578+3422
11 %% 3
1:11 %%2
a <- 1:10000
index  <- a %% 5 =0
index  <- a %% 5 ==0
sum(index)
index <- index %% 7
sum(index)
a <- 1:10000
index  <- a %% 5 ==0
sum(index)
index <- index %% 7 == 0
sum(index)
index  <- (a %% 5 ==0) &  (a %% 7 ==0)
sum(index)
a <- 0:999
index  <- (a %% 5 ==0) &  (a %% 7 ==0)
sum(index)
a <- 0:9999
index  <- (a %% 5 ==0) &  (a %% 7 ==0)
sum(index)
a <- 0:1000
index  <- (a %% 5 ==0) &  (a %% 7 ==0)
sum(index)
index <- index %% 7 == 0
1+6*1:100
a <- 1:9990
index  <- (a %% 5 ==0) &  (a %% 7 ==0)
sum(index)
a <- 1:9990
index  <- (a %% 5 ==0) &  (a %% 7 ==0)
sum(index)
index <- index %% 7 == 0
a <- 1:9990
index  <- (a %% 5 ==0)
sum(index)
a <- 1:9990
index  <- (a %% 5 ==0) &  (a %% 7 ==0)
sum(index)
a <- 1:9990
index  <- (a %% 35 ==0)
sum(index)
a <- 1:999
index  <- (a %% 35 ==0) &  (a %% 7 ==0)
sum(index)
index <- index %% 7 == 0
1+6*1:100
a <- 1:9990
index  <- (a %% 35 ==0) &  (a %% 7 ==0)
a[index]
a <- 1:9990
index  <- (a %% 5 ==0) &  (a %% 7 ==0)
a[index]
a <- 1:9999
index  <- (a %% 5 ==0) &  (a %% 7 ==0) &  (a %% 10 ==0)
a[index]
sum(index)
142-15
142-14
1+6*1:100
62*5+2
749-2
749-2/62
(749-2)/62
rm(list=ls())
setwd("C:/Users/usuario/Desktop/GitHub/DSenCDMX/AWS/Intento1")
data.raw <- read.csv(file='device_failure.csv') # few records kernels function works fine
sum(is.na(data.raw)) # not nulls thank you :D
sapply(data.raw, class)
require(lubridate) # easy handle datetimes
require(dplyr) # like SQL in R, and also load pipe operator
require(ggplot2) # easy, fast  adn nice plots
data.raw %>% arrange(device, date) %>% mutate(date = ymd(date) ) -> data.raw
names(data.raw)
data.raw %>% group_by(device) %>% summarise(n=n() )
data <- data.raw
table(data$failure) / dim(data)[1]
summary(data)
ggplot(data, aes(date, attribute1, color= device, alpha=.03 )) + geom_line() +   theme_minimal() +
theme(legend.position="none")
ggplot(data, aes(attribute1, fill =  as.character(failure), alpha=.01)) +
geom_density()  + theme_minimal()
ggplot(data, aes(attribute2, fill =  as.character(failure), alpha=.01)) +
geom_density()  + theme_minimal()
ggplot(data, aes(attribute3, fill =  as.character(failure), alpha=.01)) +
geom_density()  + theme_minimal()
ggplot(data, aes(attribute4, fill =  as.character(failure), alpha=.01)) +
geom_density()  + theme_minimal()
ggplot(data, aes(attribute5, fill =  as.character(failure), alpha=.01)) +
geom_density()  + theme_minimal()
ggplot(data, aes(attribute6, fill =  as.character(failure), alpha=.01)) +
geom_density()  + theme_minimal()
ggplot(data, aes(attribute7, fill =  as.character(failure), alpha=.01)) +
geom_density()  + theme_minimal()
ggplot(data, aes(attribute8, fill =  as.character(failure), alpha=.01)) +
geom_density()  + theme_minimal()
ggplot(data, aes(attribute9, fill =  as.character(failure), alpha=.01)) +
geom_density()  + theme_minimal()
index.columns <- c(2, 3, 4, 7, 8, 9) + 3
# log features selected
data[, names(data)[index.columns]] <-  log(data[, names(data)[index.columns]] + 1 )
index.columns <- grep('attr', names(data.raw))
data <- data.raw
summary(data)
names(data)[index.columns]
data[, names(data)[index.columns]]
log(data[, names(data)[index.columns]] + 1 )
rm(list=ls())
setwd("C:/Users/usuario/Desktop/GitHub/DSenCDMX/AWS/Intento1")
data.raw <- read.csv(file='device_failure.csv') # few records kernels function works fine
sum(is.na(data.raw)) # not nulls thank you :D
sapply(data.raw, class)
require(lubridate) # easy handle datetimes
require(dplyr) # like SQL in R, and also load pipe operator
require(ggplot2) # easy, fast  adn nice plots
data.raw %>% arrange(device, date) %>% mutate(date = ymd(date) ) -> data.raw
names(data.raw)
data.raw %>% group_by(device) %>% summarise(n=n() )
data <- data.raw
table(data$failure) / dim(data)[1]
summary(data)
ggplot(data, aes(date, attribute1, color= device, alpha=.03 )) + geom_line() +   theme_minimal() +
theme(legend.position="none")
ggplot(data, aes(attribute1, fill =  as.character(failure), alpha=.01)) +
geom_density()  + theme_minimal()
ggplot(data, aes(attribute2, fill =  as.character(failure), alpha=.01)) +
geom_density()  + theme_minimal()
ggplot(data, aes(attribute3, fill =  as.character(failure), alpha=.01)) +
geom_density()  + theme_minimal()
ggplot(data, aes(attribute4, fill =  as.character(failure), alpha=.01)) +
geom_density()  + theme_minimal()
ggplot(data, aes(attribute5, fill =  as.character(failure), alpha=.01)) +
geom_density()  + theme_minimal()
ggplot(data, aes(attribute6, fill =  as.character(failure), alpha=.01)) +
geom_density()  + theme_minimal()
ggplot(data, aes(attribute7, fill =  as.character(failure), alpha=.01)) +
geom_density()  + theme_minimal()
ggplot(data, aes(attribute8, fill =  as.character(failure), alpha=.01)) +
geom_density()  + theme_minimal()
ggplot(data, aes(attribute9, fill =  as.character(failure), alpha=.01)) +
geom_density()  + theme_minimal()
index.columns <- c(2, 3, 4, 7, 8, 9) + 3
# log features selected
data[, names(data)[index.columns]] <-  log(data[, names(data)[index.columns]] + 1 )
index.columns <- grep('attr', names(data.raw))
summary(data)
ggplot(data, aes(attribute1, fill =  as.character(failure), alpha=.01)) +
geom_density()  + theme_minimal()
ggplot(data, aes(attribute2, fill =  as.character(failure), alpha=.01)) +
geom_density()  + theme_minimal()
ggplot(data, aes(attribute3, fill =  as.character(failure), alpha=.01)) +
geom_density()  + theme_minimal()
ggplot(data, aes(attribute4, fill =  as.character(failure), alpha=.01)) +
geom_density()  + theme_minimal()
ggplot(data, aes(attribute5, fill =  as.character(failure), alpha=.01)) +
geom_density()  + theme_minimal()
ggplot(data, aes(attribute6, fill =  as.character(failure), alpha=.01)) +
geom_density()  + theme_minimal()
ggplot(data, aes(attribute7, fill =  as.character(failure), alpha=.01)) +
geom_density()  + theme_minimal()
ggplot(data, aes(attribute8, fill =  as.character(failure), alpha=.01)) +
geom_density()  + theme_minimal()
ggplot(data, aes(attribute9, fill =  as.character(failure), alpha=.01)) +
geom_density()  + theme_minimal()
index.columns <- c(2, 3, 4, 7, 8, 9) + 3
index.columns <- grep('attr', names(data.raw))
summary(data)
for ( i in index.columns )
{
temp <- data.raw[, names(data.raw)[i]]
data[, names(data.raw)[i]] <- scale(temp)
}
ggplot(data, aes(attribute1, fill =  as.character(failure), alpha=.01)) +
geom_density() + xlim(c(-0.1,244140480 +20 )) + theme_minimal()
rm(list=ls())
setwd("C:/Users/usuario/Desktop/GitHub/DSenCDMX/AWS/Intento1")
data.raw <- read.csv(file='device_failure.csv') # few records kernels function works fine
sum(is.na(data.raw)) # not nulls thank you :D
sapply(data.raw, class)
require(lubridate) # easy handle datetimes
require(dplyr) # like SQL in R, and also load pipe operator
require(ggplot2) # easy, fast  adn nice plots
data.raw %>% arrange(device, date) %>% mutate(date = ymd(date) ) -> data.raw
names(data.raw)
data.raw %>% group_by(device) %>% summarise(n=n() )
data <- data.raw
table(data$failure) / dim(data)[1]
summary(data)
ggplot(data, aes(date, attribute1, color= device, alpha=.03 )) + geom_line() +   theme_minimal() +
theme(legend.position="none")
ggplot(data, aes(attribute1, fill =  as.character(failure), alpha=.01)) +
geom_density()  + theme_minimal()
ggplot(data, aes(attribute2, fill =  as.character(failure), alpha=.01)) +
geom_density()  + theme_minimal()
ggplot(data, aes(attribute3, fill =  as.character(failure), alpha=.01)) +
geom_density()  + theme_minimal()
ggplot(data, aes(attribute4, fill =  as.character(failure), alpha=.01)) +
geom_density()  + theme_minimal()
ggplot(data, aes(attribute5, fill =  as.character(failure), alpha=.01)) +
geom_density()  + theme_minimal()
ggplot(data, aes(attribute6, fill =  as.character(failure), alpha=.01)) +
geom_density()  + theme_minimal()
ggplot(data, aes(attribute7, fill =  as.character(failure), alpha=.01)) +
geom_density()  + theme_minimal()
ggplot(data, aes(attribute8, fill =  as.character(failure), alpha=.01)) +
geom_density()  + theme_minimal()
ggplot(data, aes(attribute9, fill =  as.character(failure), alpha=.01)) +
geom_density()  + theme_minimal()
index.columns <- c(2, 3, 4, 7, 8, 9) + 3
# log features selected
data[, names(data)[index.columns]] <-  log(data[, names(data)[index.columns]] + 1 )
index.columns <- grep('attr', names(data.raw))
summary(data)
for ( i in index.columns )
{
temp <- data.raw[, names(data.raw)[i]]
data[, names(data)[i]] <- scale(temp)
}
rm(list=ls())
setwd("C:/Users/usuario/Desktop/GitHub/DSenCDMX/AWS/Intento1")
data.raw <- read.csv(file='device_failure.csv') # few records kernels function works fine
sum(is.na(data.raw)) # not nulls thank you :D
sapply(data.raw, class)
require(lubridate) # easy handle datetimes
require(dplyr) # like SQL in R, and also load pipe operator
require(ggplot2) # easy, fast  adn nice plots
data.raw %>% arrange(device, date) %>% mutate(date = ymd(date) ) -> data.raw
names(data.raw)
data.raw %>% group_by(device) %>% summarise(n=n() )
data <- data.raw
table(data$failure) / dim(data)[1]
summary(data)
ggplot(data, aes(date, attribute1, color= device, alpha=.03 )) + geom_line() +   theme_minimal() +
theme(legend.position="none")
ggplot(data, aes(attribute1, fill =  as.character(failure), alpha=.01)) +
geom_density()  + theme_minimal()
ggplot(data, aes(attribute2, fill =  as.character(failure), alpha=.01)) +
geom_density()  + theme_minimal()
ggplot(data, aes(attribute3, fill =  as.character(failure), alpha=.01)) +
geom_density()  + theme_minimal()
ggplot(data, aes(attribute4, fill =  as.character(failure), alpha=.01)) +
geom_density()  + theme_minimal()
ggplot(data, aes(attribute5, fill =  as.character(failure), alpha=.01)) +
geom_density()  + theme_minimal()
ggplot(data, aes(attribute6, fill =  as.character(failure), alpha=.01)) +
geom_density()  + theme_minimal()
ggplot(data, aes(attribute7, fill =  as.character(failure), alpha=.01)) +
geom_density()  + theme_minimal()
ggplot(data, aes(attribute8, fill =  as.character(failure), alpha=.01)) +
geom_density()  + theme_minimal()
ggplot(data, aes(attribute9, fill =  as.character(failure), alpha=.01)) +
geom_density()  + theme_minimal()
index.columns <- c(2, 3, 4, 7, 8, 9) + 3
# log features selected
data[, names(data)[index.columns]] <-  log(data[, names(data)[index.columns]] + 1 )
index.columns <- grep('attr', names(data.raw))
summary(data)
for ( i in index.columns )
{
temp <- data[, names(data)[i]]
data[, names(data)[i]] <- scale(temp)
}
ggplot(data, aes(attribute1, fill =  as.character(failure), alpha=.01)) +
geom_density() + xlim(c(-0.1,244140480 +20 )) + theme_minimal()
summary(data)
ggplot(data, aes(attribute1, fill =  as.character(failure), alpha=.01)) +
geom_density() + xlim(c(-0.1,244140480 +20 )) + theme_minimal()
ggplot(data, aes(attribute1, fill =  as.character(failure), alpha=.01)) +
geom_density() + theme_minimal()
ggplot(data, aes(attribute2, fill =  as.character(failure), alpha=.01)) +
geom_density()  + theme_minimal()
ggplot(data, aes(attribute3, fill =  as.character(failure), alpha=.01)) +
geom_density()  + theme_minimal()
ggplot(data, aes(attribute4, fill =  as.character(failure), alpha=.01)) +
geom_density()  + theme_minimal()
ggplot(data, aes(attribute5, fill =  as.character(failure), alpha=.01)) +
geom_density()  + theme_minimal()
ggplot(data, aes(attribute6, fill =  as.character(failure), alpha=.01)) +
geom_density()  + theme_minimal()
ggplot(data, aes(attribute7, fill =  as.character(failure), alpha=.01)) +
geom_density()  + theme_minimal()
ggplot(data, aes(attribute8, fill =  as.character(failure), alpha=.01)) +
geom_density()  + theme_minimal()
ggplot(data, aes(attribute9, fill =  as.character(failure), alpha=.01)) +
geom_density()  + theme_minimal()
############### Split data
require(caret)
set.seed(0)
?createDataPartition
train.index <- createDataPartition(data$device, p = .7, list = FALSE, times = 1)
train <- data[train.index, ]
test <- data[-train.index, ]
####################   train
fit.control <- trainControl( method = "repeatedcv", number = 5, repeats = 2)
data$failure <- factor(data$failure)
train.index <- createDataPartition(data$device, p = .7, list = FALSE, times = 1)
train <- data[train.index, ]
test <- data[-train.index, ]
####################   train
fit.control <- trainControl( method = "repeatedcv", number = 5, repeats = 2)
data$date <- data$device <- NULL
train.index <- createDataPartition(data$device, p = .7, list = FALSE, times = 1)
train <- data[train.index, ]
test <- data[-train.index, ]
####################   train
fit.control <- trainControl( method = "repeatedcv", number = 5, repeats = 2)
####################   train
fit.control <- trainControl( method = "repeatedcv", number = 5, repeats = 2)
gbmFit1 <- train(failure ~ ., data = train, method = "gbm", trControl = fit.control,
verbose = TRUE)
require(e1071)
install.packages("gbm")
gbmFit1 <- train(failure ~ ., data = train, method = "gbm", trControl = fit.control,
verbose = TRUE)
############### Split data
require(caret)
set.seed(0)
data$failure <- factor(data$failure)
data$date <- data$device <- NULL
train.index <- createDataPartition(data$device, p = .7, list = FALSE, times = 1)
rm(list=ls())
setwd("C:/Users/usuario/Desktop/GitHub/DSenCDMX/AWS/Intento1")
data.raw <- read.csv(file='device_failure.csv') # few records kernels function works fine
sum(is.na(data.raw)) # not nulls thank you :D
sapply(data.raw, class)
require(lubridate) # easy handle datetimes
require(dplyr) # like SQL in R, and also load pipe operator
require(ggplot2) # easy, fast  adn nice plots
data.raw %>% arrange(device, date) %>% mutate(date = ymd(date) ) -> data.raw
names(data.raw)
data.raw %>% group_by(device) %>% summarise(n=n() )
data <- data.raw
table(data$failure) / dim(data)[1]
summary(data)
ggplot(data, aes(date, attribute1, color= device, alpha=.03 )) + geom_line() +   theme_minimal() +
theme(legend.position="none")
ggplot(data, aes(attribute1, fill =  as.character(failure), alpha=.01)) +
geom_density()  + theme_minimal()
ggplot(data, aes(attribute2, fill =  as.character(failure), alpha=.01)) +
geom_density()  + theme_minimal()
ggplot(data, aes(attribute3, fill =  as.character(failure), alpha=.01)) +
geom_density()  + theme_minimal()
ggplot(data, aes(attribute4, fill =  as.character(failure), alpha=.01)) +
geom_density()  + theme_minimal()
ggplot(data, aes(attribute5, fill =  as.character(failure), alpha=.01)) +
geom_density()  + theme_minimal()
ggplot(data, aes(attribute6, fill =  as.character(failure), alpha=.01)) +
geom_density()  + theme_minimal()
ggplot(data, aes(attribute7, fill =  as.character(failure), alpha=.01)) +
geom_density()  + theme_minimal()
ggplot(data, aes(attribute8, fill =  as.character(failure), alpha=.01)) +
geom_density()  + theme_minimal()
ggplot(data, aes(attribute9, fill =  as.character(failure), alpha=.01)) +
geom_density()  + theme_minimal()
index.columns <- c(2, 3, 4, 7, 8, 9) + 3
# log features selected
data[, names(data)[index.columns]] <-  log(data[, names(data)[index.columns]] + 1 )
index.columns <- grep('attr', names(data.raw))
summary(data)
for ( i in index.columns )
{
temp <- data[, names(data)[i]]
data[, names(data)[i]] <- scale(temp)
}
ggplot(data, aes(attribute1, fill =  as.character(failure), alpha=.01)) +
geom_density() + theme_minimal()
ggplot(data, aes(attribute2, fill =  as.character(failure), alpha=.01)) +
geom_density()  + theme_minimal()
ggplot(data, aes(attribute3, fill =  as.character(failure), alpha=.01)) +
geom_density()  + theme_minimal()
ggplot(data, aes(attribute4, fill =  as.character(failure), alpha=.01)) +
geom_density()  + theme_minimal()
ggplot(data, aes(attribute5, fill =  as.character(failure), alpha=.01)) +
geom_density()  + theme_minimal()
ggplot(data, aes(attribute6, fill =  as.character(failure), alpha=.01)) +
geom_density()  + theme_minimal()
ggplot(data, aes(attribute7, fill =  as.character(failure), alpha=.01)) +
geom_density()  + theme_minimal()
ggplot(data, aes(attribute8, fill =  as.character(failure), alpha=.01)) +
geom_density()  + theme_minimal()
ggplot(data, aes(attribute9, fill =  as.character(failure), alpha=.01)) +
geom_density()  + theme_minimal()
############### Split data
require(caret)
set.seed(0)
data$failure <- factor(data$failure)
data$date <- data$device <- NULL
train.index <- createDataPartition(data$device, p = .7, list = FALSE, times = 1)
train <- data[train.index, ]
train.index <- createDataPartition(data$failure, p = .7, list = FALSE, times = 1)
train <- data[train.index, ]
test <- data[-train.index, ]
####################   train
fit.control <- trainControl( method = "repeatedcv", number = 5, repeats = 2)
require(gbm)
require(e1071)
gbmFit1 <- train(failure ~ ., data = train, method = "gbm", trControl = fit.control,
verbose = TRUE)
install.packages("e1071")
require(gbm)
require(e1071) # svm impmelemntation
gbmFit1 <- train(failure ~ ., data = train, method = "gbm", trControl = fit.control,
verbose = TRUE)
gbmFit1
rm(list=ls())
setwd("C:/Users/usuario/Desktop/GitHub/DSenCDMX/AWS/Intento1")
data.raw <- read.csv(file='device_failure.csv') # few records kernels function works fine
sum(is.na(data.raw)) # not nulls thank you :D
sapply(data.raw, class)
require(lubridate) # easy handle datetimes
require(dplyr) # like SQL in R, and also load pipe operator
require(ggplot2) # easy, fast  adn nice plots
data.raw %>% arrange(device, date) %>% mutate(date = ymd(date) ) -> data.raw
names(data.raw)
data.raw %>% group_by(device) %>% summarise(n=n() )
data <- data.raw
table(data$failure) / dim(data)[1]
summary(data)
ggplot(data, aes(date, attribute1, color= device, alpha=.03 )) + geom_line() +   theme_minimal() +
theme(legend.position="none")
ggplot(data, aes(attribute1, fill =  as.character(failure), alpha=.01)) +
geom_density()  + theme_minimal()
ggplot(data, aes(attribute2, fill =  as.character(failure), alpha=.01)) +
geom_density()  + theme_minimal()
ggplot(data, aes(attribute3, fill =  as.character(failure), alpha=.01)) +
geom_density()  + theme_minimal()
ggplot(data, aes(attribute4, fill =  as.character(failure), alpha=.01)) +
geom_density()  + theme_minimal()
ggplot(data, aes(attribute5, fill =  as.character(failure), alpha=.01)) +
geom_density()  + theme_minimal()
ggplot(data, aes(attribute6, fill =  as.character(failure), alpha=.01)) +
geom_density()  + theme_minimal()
ggplot(data, aes(attribute7, fill =  as.character(failure), alpha=.01)) +
geom_density()  + theme_minimal()
ggplot(data, aes(attribute8, fill =  as.character(failure), alpha=.01)) +
geom_density()  + theme_minimal()
ggplot(data, aes(attribute9, fill =  as.character(failure), alpha=.01)) +
geom_density()  + theme_minimal()
index.columns <- c(2, 3, 4, 7, 8, 9) + 3
# log features selected
data[, names(data)[index.columns]] <-  log(data[, names(data)[index.columns]] + 1 )
# standar features
index.columns <- grep('attr', names(data.raw))
summary(data)
for ( i in index.columns )
{
temp <- data[, names(data)[i]]
data[, names(data)[i]] <- scale(temp)
}
ggplot(data, aes(attribute1, fill =  as.character(failure), alpha=.01)) +
geom_density() + theme_minimal()
ggplot(data, aes(attribute2, fill =  as.character(failure), alpha=.01)) +
geom_density()  + theme_minimal()
ggplot(data, aes(attribute3, fill =  as.character(failure), alpha=.01)) +
geom_density()  + theme_minimal()
ggplot(data, aes(attribute4, fill =  as.character(failure), alpha=.01)) +
geom_density()  + theme_minimal()
ggplot(data, aes(attribute5, fill =  as.character(failure), alpha=.01)) +
geom_density()  + theme_minimal()
ggplot(data, aes(attribute6, fill =  as.character(failure), alpha=.01)) +
geom_density()  + theme_minimal()
ggplot(data, aes(attribute7, fill =  as.character(failure), alpha=.01)) +
geom_density()  + theme_minimal()
ggplot(data, aes(attribute8, fill =  as.character(failure), alpha=.01)) +
geom_density()  + theme_minimal()
ggplot(data, aes(attribute9, fill =  as.character(failure), alpha=.01)) +
geom_density()  + theme_minimal()
############### Split data
require(caret)
set.seed(0)
data$failure <- factor(data$failure)
data$date <- data$device <- NULL
train.index <- createDataPartition(data$failure, p = .7, list = FALSE, times = 1)
train <- data[train.index, ]
test <- data[-train.index, ]
####################   train
fit.control <- trainControl( method = "cv", number = 5, repeats = 2,
allowParallel = TRUE)
require(gbm)
require(e1071) # svm impmelemntation
gbmFit1 <- train(failure ~ ., data = train, method = "gbm", trControl = fit.control,
verbose = TRUE)
gbmFit1
?train
