?geom_density
ggplot(data= sample.normal, aes(x = y, fill = I('purple'))) + geom_density(n = 100)
ggplot(data= sample.normal, aes(x = y, fill = I('purple'))) + geom_density(n = 20)
ggplot(data= sample.normal, aes(x = y, fill = I('purple'))) + geom_density(n = 200)
ggplot(data= sample.normal, aes(x = y, fill = I('purple'))) + geom_density(n = 200) +
ylab('Frecuencia') + xlab('') + ggtitle('Muestra Normal')
ggplot(data= sample.normal, aes(x = y, fill = I('purple'))) + geom_density(n = 200) +
ylab('Frecuencia') + xlab('') + ggtitle('Muestra Normal') + theme_minimal()
ggplot(data= sample.no.normal, aes(x = y, fill = I('orange'))) + geom_density(n = 200) +
ylab('Frecuencia') + xlab('') + ggtitle('Muestra No-Normal') + theme_minimal()
ggplot(data= sample.normal, aes(x = y, fill = I('purple'))) + geom_density(n = 200) +
ylab('Frecuencia') + xlab('') + ggtitle('Muestra Normal') + theme_minimal()
ggplot(data= sample.no.normal, aes(x = y, fill = I('orange'))) + geom_density(n = 200) +
ylab('Frecuencia') + xlab('') + ggtitle('Muestra No-Normal') + theme_minimal()
ggplot(data= sample.normal, aes(x = y, fill = I('purple'))) + geom_density() +
ylab('Frecuencia') + xlab('') + ggtitle('Muestra Normal') + theme_minimal()
ggplot(data= sample.no.normal, aes(x = y, fill = I('orange'))) + geom_density() +
ylab('Frecuencia') + xlab('') + ggtitle('Muestra No-Normal') + theme_minimal()
#### Se generan dos muestras una con distribucion normal y otra que no lo es ###
n <- 100*5 # tamanio de la muestra
set.seed(0) # fijamos una s(emilla para hacer reproducibles los ejemplos
sample.normal <- data.frame(y = rnorm(n, mean = 10, sd = 2) )
sample.no.normal <- data.frame(y = rexp(n, rate = 1/2))
#### histogramas ####
library(ggplot2) # package para bonitos graficos
ggplot(data= sample.normal, aes(x = y, fill = I('purple'))) + geom_density() +
ylab('Frecuencia') + xlab('') + ggtitle('Muestra Normal') + theme_minimal()
ggplot(data= sample.no.normal, aes(x = y, fill = I('orange'))) + geom_density() +
ylab('Frecuencia') + xlab('') + ggtitle('Muestra No-Normal') + theme_minimal()
##### tests de normalidad
# grafico QQ-plot
qqnorm(sample.normal$y)
qqline(sample.no.normal$y,lty=2)
##### tests de normalidad
# grafico QQ-plot
qqnorm(sample.normal$y)
qqline(sample.normal$y,lty=2)
qqline(sample.normal$y,lty=2, col='red')
# no ejemplo
qqnorm(sample.no.normal$y)
qqline(sample.no.normal$y,lty=2, col='red')
#### Se generan dos muestras una con distribucion normal y otra que no lo es ###
n <- 100*5 # tamanio de la muestra
set.seed(0) # fijamos una s(emilla para hacer reproducibles los ejemplos
sample.normal <- data.frame(y = rnorm(n, mean = 10, sd = 2) )
a <- iris
#### Se generan dos muestras una con distribucion normal y otra que no lo es ###
n <- dim(iris)[1] # tamanio de la muestra
set.seed(0) # fijamos una s(emilla para hacer reproducibles los ejemplos
sample.normal <- data.frame(y = rnorm(n, mean = 10, sd = 2) )
sample.no.normal <- data.frame(y = iris$Sepal.Length)
#### histogramas ####
library(ggplot2) # package para bonitos graficos
ggplot(data= sample.normal, aes(x = y, fill = I('purple'))) + geom_density() +
ylab('Frecuencia') + xlab('') + ggtitle('Muestra Normal') + theme_minimal()
ggplot(data= sample.no.normal, aes(x = y, fill = I('orange'))) + geom_density() +
ylab('Frecuencia') + xlab('') + ggtitle('Muestra No-Normal') + theme_minimal()
##### tests de normalidad
# grafico QQ-plot
qqnorm(sample.normal$y)
qqline(sample.normal$y,lty=2, col='red')
# no ejemplo
qqnorm(sample.no.normal$y)
qqline(sample.no.normal$y,lty=2, col='red')
#### Se generan dos muestras una con distribucion normal y otra que no lo es ###
n <- dim(iris)[1] # tamanio de la muestra
set.seed(0) # fijamos una s(emilla para hacer reproducibles los ejemplos
sample.normal <- data.frame(y = rnorm(n, mean = 10, sd = 2) )
sample.no.normal <- data.frame(y = iris$Sepal.Length)
no.ejemplo <- data.frame(y= rexp(n, rate = 1/2))
#### histogramas ####
library(ggplot2) # package para bonitos graficos
ggplot(data= sample.normal, aes(x = y, fill = I('purple'))) + geom_density() +
ylab('Frecuencia') + xlab('') + ggtitle('Muestra Normal') + theme_minimal()
ggplot(data= sample.no.normal, aes(x = y, fill = I('orange'))) + geom_density() +
ylab('Frecuencia') + xlab('') + ggtitle('Muestra No-Normal') + theme_minimal()
ggplot(data= no.ejemplo, aes(x = y, fill = I('green'))) + geom_density() +
ylab('Frecuencia') + xlab('') + ggtitle('Muestra No-Normal') + theme_minimal()
##### tests de normalidad
# grafico QQ-plot
qqnorm(sample.normal$y)
qqline(sample.normal$y,lty=2, col='red')
# no ejemplo
qqnorm(sample.no.normal$y)
qqline(sample.no.normal$y,lty=2, col='red')
# no ejemplo
qqnorm(sample.no.normal$y)
##### tests de normalidad
# grafico QQ-plot
qqnorm(sample.normal$y)
##### tests de normalidad
# grafico QQ-plot
qqnorm(sample.normal$y, main='Caso normal')
qqline(sample.normal$y,lty=2, col='red')
qqnorm(sample.no.normal$y, "Iris")
qqline(sample.no.normal$y,lty=2, col='red')
qqnorm(sample.no.normal$y, "Iris")
qqnorm(sample.no.normal$y, main="Iris")
qqline(sample.no.normal$y,lty=2, col='red')
# no ejemplo
qqnorm(no.ejemplo$y, main='No ejemplo')
qqline(no.ejemplo$y,lty=2, col='red')
#### test de Shapiro-Wilks
shapiro.test(sample.normal$y)
shapiro.test(sample.no.normal$y)
shapiro.test(no.ejemplo$y)
#### Se generan dos muestras una con distribucion normal y otra que no lo es ###
n <- dim(iris)[1] # tamanio de la muestra
set.seed(0) # fijamos una s(emilla para hacer reproducibles los ejemplos
#### Se generan dos muestras una con distribucion normal y otra que no lo es ###
n <- dim(iris)[1] # tamanio de la muestra
set.seed(0) # fijamos una s(emilla para hacer reproducibles los ejemplos
sample.normal <- data.frame(y = rnorm(n, mean = 10, sd = 2) )
sample.no.normal <- data.frame(y = iris$Sepal.Length)
no.ejemplo <- data.frame(y= rexp(n, rate = 1/2))
#### histogramas ####
library(ggplot2) # package para bonitos graficos
ggplot(data= sample.normal, aes(x = y, fill = I('purple'))) + geom_density() +
ylab('Frecuencia') + xlab('') + ggtitle('Muestra Normal') + theme_minimal()
ggplot(data= sample.no.normal, aes(x = y, fill = I('orange'))) + geom_density() +
ylab('Frecuencia') + xlab('') + ggtitle('Muestra No-Normal') + theme_minimal()
ggplot(data= no.ejemplo, aes(x = y, fill = I('green'))) + geom_density() +
ylab('Frecuencia') + xlab('') + ggtitle('No ejemplo') + theme_minimal()
##### tests de normalidad
# grafico QQ-plot
qqnorm(sample.normal$y, main='Caso normal')
qqline(sample.normal$y,lty=2, col='red')
qqnorm(sample.no.normal$y, main="Iris")
qqline(sample.no.normal$y,lty=2, col='red')
# no ejemplo
qqnorm(no.ejemplo$y, main='No ejemplo')
qqline(no.ejemplo$y,lty=2, col='red')
#### test de Shapiro-Wilks
shapiro.test(sample.normal$y)
shapiro.test(sample.no.normal$y)
shapiro.test(no.ejemplo$y)
#### test de Komogorov-Smirnov
ks.test(sample.normal, )
#### test de Komogorov-Smirnov
ks.test(sample.normal$y, 'pnorm', mean(sample.normal$y), sd(sample.normal$y) )
ks.test(sample.no.normal$y, 'pnorm', mean(sample.no.normal$y), sd(sample.no.normal$y) )
ks.test(no.ejemplo$y, 'pnorm', mean(no.ejemplo$y), sd(no.ejemplo$y) )
names(iris)
#### Fisher test
ggplot(iris, aes(Sepal.Length, Petal.Length, fill=Species)) + geom_point()
#### Fisher test
ggplot(iris, aes(Sepal.Length, Petal.Length, col=Species)) + geom_point()
#### Fisher test
ggplot(iris, aes(Sepal.Length, Petal.Length, col=Species)) + geom_point() + theme_minimal()
#### Fisher test
ggplot(data= iris, aes(x = Sepal.Length, fill = I('green'))) + geom_density() +
ylab('Frecuencia') + xlab('') + ggtitle('Sepal.Length') + theme_minimal()
#### Fisher test
ggplot(data= iris, aes(x = Sepal.Length, fill = I('purple'))) + geom_density() +
ylab('Frecuencia') + xlab('') + ggtitle('Sepal Length') + theme_minimal()
ggplot(data= iris, aes(x = Petal.Length, fill = I('purple'))) + geom_density() +
ylab('Frecuencia') + xlab('') + ggtitle('Petal Length') + theme_minimal()
ggplot(iris, aes(Sepal.Length, Petal.Length, col=Species)) + geom_point() + theme_minimal()
#### Fisher test
ggplot(iris, aes(Sepal.Length, Petal.Length, col=Species)) + geom_point() + theme_minimal()
ggplot(data= iris, aes(x = Sepal.Length, fill = I('purple'))) + geom_density() +
ylab('Frecuencia') + xlab('') + ggtitle('Sepal Length') + theme_minimal()
ggplot(data= iris, aes(x = Petal.Length, fill = I('purple'))) + geom_density() +
ylab('Frecuencia') + xlab('') + ggtitle('Petal Length') + theme_minimal()
var.test(iris$Sepal.Length, iris$Petal.Length)
##### student test
boxplot(Sepal.Length ~ Species, data = iris)
##### student test
boxplot(Sepal.Length ~ Species, data = iris, notch=T,xlab="Species",ylab="Sepal Length")
table(iris$Species)
iris$Sepal.Length[iris$Species=='setosa']
t.test(iris$Sepal.Length[iris$Species=='setosa'], iris$Sepal.Length[iris$Species=='versicolor']  )
t.test(iris$Sepal.Length[iris$Species=='versicolor'], iris$Sepal.Length[iris$Species=='virginica']  )
### proporciones ejemplo de bebes
prop.test(c(324, 1000), c(346, 1000))
### proporciones ejemplo de bebes
prop.test(c(324, 1000), c(324, 1000))
46
### proporciones ejemplo de bebes
prop.test(c(324, 1000), c(346, 1000))
### proporciones ejemplo de bebes
prop.test(c(324, 1000), c(346, 1000))
?prop.test
### proporciones ejemplo de bebes
prop.test(c(324, 346), c(1000, 1000))
sample(1, 1:4000,)
sample(1, 1:4000)
sample(1:4000, 1)
4000-2926
# proporciones ejemplo de votos
prop.test(c(2926,1074 ), 4000)
# proporciones ejemplo de votos
prop.test(c(2926,1074 ), c(4000, 4000))
1:100**2
(1:100)**2
(1:50)**2
(1:46)**2
(1:43)**2
(1:44)**2
3000*150
10.5*4+6
setwd("~/Desktop/covid-2019-20200322T014722Z-001/covid-2019/Antonio")
ls()
setwd("C:\Users\fou-f\Desktop\covid-2019-20200322T014722Z-001\covid-2019\Antonio")
setwd("~/Desktop/covid-2019-20200322T014722Z-001/covid-2019/Antonio")
getwd()
setwd("~/Desktop/covid-2019-20200322T014722Z-001/covid-2019/Antonio/")
getwd()
ls()
dir()
setwd("~/Desktop/covid-2019-20200322T014722Z-001/covid-2019/Antonio/")
dir()
localidades <- read.csv('hospital_localida_urbana_clues.csv')
View(localidades)
sapply(localidades, class)
setwd("~/Desktop/covid-2019-20200322T014722Z-001/covid-2019/Antonio/")
dir()
localidades <- read.csv('hospital_localida_urbana_clues.csv',
stringsAsFactors = FALSE)
sapply(localidades, class)
setwd("~/Desktop/covid-2019-20200322T014722Z-001/covid-2019/Antonio/")
dir()
catalogo <- read.csv('CatalogoLocalidadEntidadINEGI.csv',
stringsAsFactors = FALSE)
setwd("~/Desktop/covid-2019-20200322T014722Z-001/covid-2019/Antonio/")
dir()
localidades <- read.csv('hospital_localida_urbana_clues.csv',
stringsAsFactors = FALSE)
sapply(localidades, class)
catalogo <- read.csv('CatalogoLocalidadEntidadINEGI.csv',
stringsAsFactors = FALSE)
View(catalogo)
sapply(catalogo, class)
data <- merge(localidades, catalogo, all.x = TRUE,
by.x = 'localidad_urbana_cvegeo',
by.y = 'Mapa')
View(data)
setwd("~/Desktop/covid-2019-20200322T014722Z-001/covid-2019/Antonio/")
dir()
localidades <- read.csv('hospital_localida_urbana_clues.csv',
stringsAsFactors = FALSE)
sapply(localidades, class)
catalogo <- read.csv('CatalogoLocalidadEntidadINEGI.csv',
stringsAsFactors = FALSE)
sapply(catalogo, class)
data <- merge(localidades, catalogo, all.x = TRUE,
by.x = 'localidad_urbana_cvegeo',
by.y = 'Mapa')
View(data)
names(data)
setwd("~/Desktop/covid-2019-20200322T014722Z-001/covid-2019/Antonio/")
dir()
localidades <- read.csv('hospital_localida_urbana_clues.csv',
stringsAsFactors = FALSE)
setwd("~/Desktop/covid-2019-20200322T014722Z-001/covid-2019/Antonio/")
dir()
localidades <- read.csv('hospital_localida_urbana_clues.csv',
stringsAsFactors = FALSE)
sapply(localidades, class)
catalogo <- read.csv('CatalogoLocalidadEntidadINEGI.csv',
stringsAsFactors = FALSE)
sapply(catalogo, class)
data <- merge(localidades, catalogo, all.x = TRUE,
by.x = 'localidad_urbana_cvegeo',
by.y = 'Mapa')
names(data)
data.sub <- data[, c('localidad_urbana_cvegeo', "total_camas",
"Nom_Ent" , "Nom_Mun", "Nom_Loc" )]
View(data.sub)
setwd("~/Desktop/covid-2019-20200322T014722Z-001/covid-2019/Antonio/")
dir()
localidades <- read.csv('hospital_localida_urbana_clues.csv',
stringsAsFactors = FALSE)
sapply(localidades, class)
catalogo <- read.csv('CatalogoLocalidadEntidadINEGI.csv',
stringsAsFactors = FALSE)
sapply(catalogo, class)
data <- merge(localidades, catalogo, all.x = FALSE,
by.x = 'localidad_urbana_cvegeo',
by.y = 'Mapa')
names(data)
data.sub <- data[, c('localidad_urbana_cvegeo', "total_camas",
"Nom_Ent" , "Nom_Mun", "Nom_Loc" )]
View(data.sub)
write.csv(data.sub, 'Camas_localidad.csv')
write.csv(data.sub, 'Camas_localidad.csv', row.names = FALSE)
rm(list=ls())
setwd("~/Desktop/covid-2019-20200322T014722Z-001/covid-2019/Antonio/")
dir()
municipios <- read.csv('Camas_munipios.csv',
stringsAsFactors = FALSE)
sapply(municipios, class)
catalogo <- read.csv('CatalogoLocalidadEntidadINEGI.csv',
stringsAsFactors = FALSE)
sapply(catalogo, class)
View(catalogo)
View(municipios)
rm(list=ls())
dir()
municipios <- read.csv('Camas_munipios.csv',
stringsAsFactors = FALSE)
sapply(municipios, class)
municipios$municipio_cvegeo
sapply(municipios$municipio_cvegeo, function(x) nchar(as.character(x)))
longitudes <- sapply(municipios$municipio_cvegeo, function(x) nchar(as.character(x)))
tail(longitudes)
table(longitudes)
dim(municipios)[2]
dim(municipios)[1]
municipios$clave <- ''
rm(list=ls())
dir()
municipios <- read.csv('Camas_munipios.csv',
stringsAsFactors = FALSE)
sapply(municipios, class)
nchar(municipios$municipio_cvegeo)
longitudes <- sapply(municipios$municipio_cvegeo, function(x) nchar(as.character(x)))
municipios$clave <- ''
for (i in 1:dim(municipios)[1])
{
if( longitudes[i] == 4)
{
municipios$clave[i] <-  paste0('0',
as.character(municipios$municipio_cvegeo[i]))
}
View(municipios)
######################################
catalogo <- read.csv('CatalogoLocalidadEntidadINEGI.csv',
stringsAsFactors = FALSE)
sapply(catalogo, class)
catalogo$Cve_Ent <- as.character(catalogo$Cve_Ent)
View(catalogo)
catalogo$Cve_Mun <- as.character(catalogo$Cve_Mun)
######################################
catalogo <- read.csv('CatalogoLocalidadEntidadINEGI.csv',
stringsAsFactors = FALSE)
sapply(catalogo, class)
catalogo$Cve_Ent <- as.character(catalogo$Cve_Ent)
catalogo$Cve_Mun <- as.character(catalogo$Cve_Mun)
table(catalogo$Cve_Mun)
table( length(catalogo$Cve_Mun))
table(sapply(catalogo$Cve_Mun, nchar))
rm(list=ls())
dir()
municipios <- read.csv('Camas_munipios.csv',
stringsAsFactors = FALSE)
sapply(municipios, class)
nchar(municipios$municipio_cvegeo)
longitudes <- sapply(municipios$municipio_cvegeo, function(x) nchar(as.character(x)))
municipios$clave <- ''
for (i in 1:dim(municipios)[1])
{
if( longitudes[i] == 4)
{
municipios$clave[i] <-  paste0('0',
as.character(municipios$municipio_cvegeo[i]))
}
######################################
catalogo <- read.csv('CatalogoLocalidadEntidadINEGI.csv',
stringsAsFactors = FALSE)
sapply(catalogo, class)
catalogo$Cve_Ent <- as.character(catalogo$Cve_Ent)
catalogo$Cve_Mun <- as.character(catalogo$Cve_Mun)
for (i in 1:dim(catalogo)[1])
{
entidad <- catalogo$Cve_Ent[i]
if(length(entidad) == 1)
{
catalogo$Cve_Ent[i] <- paste0('0', entidad)
}
municipio <- catalogo$Cve_Mun[i]
if( length(municipio) == 1)
{
catalogo$Cve_Mun[i] <- paste0('00', municipio)
}
if( length(municipio) == 2)
{
catalogo$Cve_Mun[i] <- paste0('0', municipio)
}
################# municipios
dir()
rm(list=ls())
################# municipios
dir()
municipios <- read.csv('Camas_munipios.csv',
stringsAsFactors = FALSE)
sapply(municipios, class)
nchar(municipios$municipio_cvegeo)
longitudes <- sapply(municipios$municipio_cvegeo, function(x) nchar(as.character(x)))
municipios$clave <- ''
for (i in 1:dim(municipios)[1])
{
if( longitudes[i] == 4)
{
municipios$clave[i] <-  paste0('0',
as.character(municipios$municipio_cvegeo[i]))
}
######################################
catalogo <- read.csv('CatalogoLocalidadEntidadINEGI.csv',
stringsAsFactors = FALSE)
sapply(catalogo, class)
catalogo$Cve_Ent <- as.character(catalogo$Cve_Ent)
catalogo$Cve_Mun <- as.character(catalogo$Cve_Mun)
for (i in 1:dim(catalogo)[1])
{
entidad <- catalogo$Cve_Ent[i]
if(length(entidad) == 1)
{
catalogo$Cve_Ent[i] <- paste0('0', entidad)
}
municipio <- catalogo$Cve_Mun[i]
if( length(municipio) == 1)
{
catalogo$Cve_Mun[i] <- paste0('00', municipio)
}
if( length(municipio) == 2)
{
catalogo$Cve_Mun[i] <- paste0('0', municipio)
}
print(i)
}
rm(list=ls())
################# municipios
dir()
municipios <- read.csv('Camas_munipios.csv',
stringsAsFactors = FALSE)
sapply(municipios, class)
nchar(municipios$municipio_cvegeo)
longitudes <- sapply(municipios$municipio_cvegeo, function(x) nchar(as.character(x)))
municipios$clave <- ''
for (i in 1:dim(municipios)[1])
{
if( longitudes[i] == 4)
{
municipios$clave[i] <-  paste0('0',
as.character(municipios$municipio_cvegeo[i]))
}
View(municipios)
index <- nchar(municipios$clave) == 5
municipios$clave[index] <- as.character(municipios$municipio_cvegeo[index])
View(municipios)
rm(list=ls())
################# municipios
dir()
municipios <- read.csv('Camas_munipios.csv',
stringsAsFactors = FALSE)
sapply(municipios, class)
nchar(municipios$municipio_cvegeo)
longitudes <- sapply(municipios$municipio_cvegeo, function(x) nchar(as.character(x)))
rm(list=ls())
################# municipios
dir()
municipios <- read.csv('Camas_munipios.csv',
stringsAsFactors = FALSE)
sapply(municipios, class)
nchar(municipios$municipio_cvegeo)
longitudes <- sapply(municipios$municipio_cvegeo, function(x) nchar(as.character(x)))
municipios$clave <- as.character(municipios$municipio_cvegeo)
for (i in 1:dim(municipios)[1])
{
if( longitudes[i] == 4)
{
municipios$clave[i] <-  paste0('0',
as.character(municipios$municipio_cvegeo[i]))
}
View(municipios)
######################################
catalogo <- read.csv('CatalogoLocalidadEntidadINEGI.csv',
stringsAsFactors = FALSE)
sapply(catalogo, class)
catalogo$Cve_Ent <- as.character(catalogo$Cve_Ent)
sapply(catalogo$Cve_Ent, nchar)
table(sapply(catalogo$Cve_Ent, nchar))
index <- which( sapply(catalogo$Cve_Ent, nchar) == 1 )
index
catalogo$cve_ent <- catalogo$Cve_Ent
catalogo$cve_ent[index] <- paste0( '0',catalogo$Cve_Ent[index] )
View(catalogo)
catalogo$Cve_Mun <- as.character(catalogo$Cve_Mun)
sapply(catalogo$Cve_Mun, nchar)
table(sapply(catalogo$Cve_Mun, nchar))
index <- which( sapply(catalogo$Cve_Mun, nchar) == 1 )
catalogo$cve_mun <- catalogo$Cve_Mun
catalogo$cve_mun[index] <- paste0( '00',catalogo$Cve_Mun[index] )
index <- which( sapply(catalogo$Cve_Mun, nchar) == 2 )
catalogo$cve_mun[index] <- paste0( '0',catalogo$Cve_Mun[index] )
table(sapply(catalogo$Cve_Mun, nchar))
table(sapply(catalogo$cve_mun, nchar))
# clave
catalogo$Mapa <- NULL
catalogo$Mapa <- paste0( catalogo$cve_ent, catalogo$cve_mun)
View(catalogo)
View(municipios)
names(catalogo)
catalogo <- catalogo[, c("Nom_Ent", "Nom_Mun",  "Mapa"   )]
catalogo <- unique(catalogo)
names(municipios)
View(municipios)
View(catalogo)
data <- merge(municipios, catalogo, all.x = FALSE,
by.x = 'clave',
by.y = 'Mapa')
names(data)
View(data)
data$municipio_cvegeo <- NULL
View(data)
data$nombre <- NULL
names(data)
names(data) <- c('municipio_cvegeo',  "total_camas",
"Nom_Ent",     "Nom_Mun" )
write.csv(data, 'Camas_munipios_count.csv')
write.csv(data, 'Camas_munipios_count.csv', row.names = FALSE)
